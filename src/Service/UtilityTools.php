<?phpnamespace App\Service;class UtilityTools{    /**     * @param $term     * @param bool $fiction     * @param int $n     * @return string|null     */    public static function getImageOnBing($term, $fiction = false, $n = 0)    {        if ($n >= 10)            return null;        $endpoint = 'https://citations.cognitiveservices.azure.com/bing/v7.0/images/search';        $accessKey = '27484136e21f4d8fb1840712dc1f9694';        $headers = "Ocp-Apim-Subscription-Key: $accessKey\r\n";        $options = array ( 'http' => array (            'header' => $headers,            'method' => 'GET' ));        $context = stream_context_create($options);        $urlRoute = $endpoint  . "?q=" . urlencode($term) . "&imageType=Photo&setLang=fr-fr";        $urlRoute .= ($fiction) ? "&aspect=Tall&size=Large&imageContent=Face&minHeight=600" : "&aspect=Tall&imageContent=Face&minHeight=800";        UtilityTools::var_dump($n);        UtilityTools::var_dump($urlRoute);        $result = file_get_contents($urlRoute, false, $context);        if ($result == null || empty($result))            return null;        $result = json_decode($result);        if (!isset($result->value) || count($result->value) == 0 || (count($result->value) <= $n))            return null;        $urlMatches = $result->value[$n]->contentUrl;        $ii = 0;        if (strpos($urlMatches, "alamy") !== false || strpos($urlMatches, "citation-inspiration.com") !== false || strpos($urlMatches, "citations.co") !== false ||        strpos($urlMatches, "getty") !== false) {            $n++;            return UtilityTools::getImageOnBing($term, $fiction, $n);        }            foreach ($result->value as $v) {            if ($ii == $n)            {                echo '<img src="'.$v->contentUrl.'" width="10%"/>';            }            $ii++;        }        $m = explode(".", $urlMatches);        $m = strtolower($m[count($m) - 1]);        $format = trim($m);        if ( $format != "png" && $format != "jpg" && $format!= "jpeg")        {            $n++;            return UtilityTools::getImageOnBing($term, $fiction, $n);        }        //saving images        if (($file = @file_get_contents($urlMatches)) === false || empty($file))        {            $n++;            return UtilityTools::getImageOnBing($term, $fiction, $n);        }        $src =  __DIR__."/../../assets/upload/save/tmpImageChange".".".$format;        file_put_contents($src, file_get_contents($urlMatches));        return $src;    }    /**     * @param $per_page     * @param $page     * @param $total     * @param string $url     * @return string     */    function pagination($per_page, $page, $total,  $url='?'){        global $conDB;        $adjacents = "2";        $prevlabel = "Précédent";        $nextlabel = "Suivant";        $lastlabel = "Fin";        $page = ($page == 0 ? 1 : $page);        $start = ($page - 1) * $per_page;        $prev = $page - 1;        $next = $page + 1;        $lastpage = ceil($total / $per_page);        $lpm1 = $lastpage - 1; // //last page minus 1        $pagination = "";        if($lastpage > 1){            $pagination .= "<ul class='pagination justify-content-end'>";            if ($page > 1) $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$prev}'>{$prevlabel}</a></li>";            if ($lastpage < 7 + ($adjacents * 2)){                for ($counter = 1; $counter <= $lastpage; $counter++){                    if ($counter == $page)                        $pagination.= "<li class='page-item active'><span class='page-link'>{$counter}</span><span class='sr-only'>(current)</span></li>";                    else                        $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$counter}'>{$counter}</a></li>";                }            } elseif($lastpage > 5 + ($adjacents * 2)){                if($page < 1 + ($adjacents * 2)) {                    for ($counter = 1; $counter < 2 + ($adjacents * 2); $counter++){                        if ($counter == $page)                            $pagination.= "<li class='page-item active'><span class='page-link'>{$counter}</span><span class='sr-only'>(current)</span></li>";                        else                            $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$counter}'>{$counter}</a></li>";                    }                    $pagination.= "<li class='page-item'><span class='page-link'>...</span></li>";                    $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$lpm1}'>{$lpm1}</a></li>";                    $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$lastpage}'>{$lastpage}</a></li>";                } elseif($lastpage - ($adjacents * 2) > $page && $page > ($adjacents * 2)) {                    $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page=1'>1</a></li>";                    $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page=2'>2</a></li>";                    $pagination.= "<li class='page-item'><span class='page-link'>...</span></li>";                    for ($counter = $page - $adjacents; $counter <= $page + $adjacents; $counter++) {                        if ($counter == $page)                            $pagination.= "<li class='page-item active'><span class='page-link'>{$counter}</span><span class='sr-only'>(current)</span></li>";                        else                            $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$counter}'>{$counter}</a></li>";                    }                    $pagination.= "<li class='page-item'><span class='page-link'>..</span></li>";                    $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$lpm1}'>{$lpm1}</a></li>";                    $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$lastpage}'>{$lastpage}</a></li>";                } else {                    $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page=1'>1</a></li>";                    $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page=2'>2</a></li>";                    $pagination.= "<li class='page-item'><span class='page-link'>..</span></li>";                    for ($counter = $lastpage - (2 + ($adjacents * 2)); $counter <= $lastpage; $counter++) {                        if ($counter == $page)                            $pagination.= "<li class='page-item active'><span class='page-link'>{$counter}</span><span class='sr-only'>(current)</span></li>";                        else                            $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$counter}'>{$counter}</a></li>";                    }                }            }            if ($page < $counter - 1) {                $pagination.= "<li class='page-item'><a class='page-link' href='{$url}page={$next}'>{$nextlabel}</a></li>";            }            $pagination.= "</ul>";        }        return $pagination;    }    /**     * @return int|mixed     */    static function getPage()    {        if (isset($_GET['page']) && is_numeric($_GET['page']))        {            return $_GET['page'];        }        return 0;    }    /**     * @param $nbrCitationParPage     * @return float|int     */    static function getPageStart($nbrCitationParPage)    {        if (isset($_GET['page']) && is_numeric($_GET['page']))        {            if ($_GET['page'] <= 0)                return 0;            return ($_GET['page'] - 1) * $nbrCitationParPage;        }        return 0;    }    /**     * @return string     */    static function getTri($citationdujour = false)    {        $triReturn = "c.upload DESC";        if ($citationdujour)            $triReturn = "c.date_citation_du_jour DESC";        if (isset($_GET['tri']))        {            $tri = htmlspecialchars($_GET['tri']);            switch ($tri) {                case "recent_asc":                    $triReturn = "c.upload ASC";                    break;                case "recent_desc":                    $triReturn = "c.upload DESC";                    if ($citationdujour)                        $triReturn = "c.date_citation_du_jour DESC";                    break;                case "popularite_desc":                    $triReturn = "c.count_likes DESC";                    break;                case "alphabet_desc":                    $triReturn = "c.description DESC";                    break;                case "alphabet_asc":                    $triReturn = "c.description ASC";                    break;                case "auteur_desc":                    $triReturn = "a.name DESC";                    break;                case "auteur_asc":                    $triReturn = "a.name ASC";                    break;            }        }        return $triReturn;    }    /**     * @return string     */    static function getTriHuman()    {        $triReturn = "Plus récentes";        if (isset($_GET['tri']))        {            $tri = htmlspecialchars($_GET['tri']);            switch ($tri) {                case "recent_asc":                    $triReturn = "Moins récentes";                    break;                case "recent_desc":                    $triReturn = "Plus récentes";                    break;                case "popularite_desc":                    $triReturn = "Par popularité";                    break;                case "alphabet_desc":                    $triReturn = "Ordre alphabétique ↓";                    break;                case "alphabet_asc":                    $triReturn = "Ordre alphabétique";                    break;                case "auteur_desc":                    $triReturn = "Par auteur ↓";                    break;                case "auteur_asc":                    $triReturn = "Par auteur";                    break;            }        }        return $triReturn;    }    /**     * @param $str     * @return string     */    public static function removeAccent($str)    {        $unwanted_array = array(            'Š'=>'S', 'š'=>'s', 'Ž'=>'Z', 'ž'=>'z', 'À'=>'A', 'Á'=>'A', 'Â'=>'A', 'Ã'=>'A', 'Ä'=>'A', 'Å'=>'A', 'Æ'=>'A', 'Ç'=>'C', 'È'=>'E', 'É'=>'E',            'Ê'=>'E', 'Ë'=>'E', 'Ì'=>'I', 'Í'=>'I', 'Î'=>'I', 'Ï'=>'I', 'Ñ'=>'N', 'Ò'=>'O', 'Ó'=>'O', 'Ô'=>'O', 'Õ'=>'O', 'Ö'=>'O', 'Ø'=>'O', 'Ù'=>'U',            'Ú'=>'U', 'Û'=>'U', 'Ü'=>'U', 'Ý'=>'Y', 'Þ'=>'B', 'ß'=>'Ss', 'à'=>'a', 'á'=>'a', 'â'=>'a', 'ã'=>'a', 'ä'=>'a', 'å'=>'a', 'æ'=>'a', 'ç'=>'c',            'è'=>'e', 'é'=>'e', 'ê'=>'e', 'ë'=>'e', 'ì'=>'i', 'í'=>'i', 'î'=>'i', 'ï'=>'i', 'ð'=>'o', 'ñ'=>'n', 'ò'=>'o', 'ó'=>'o', 'ô'=>'o', 'õ'=>'o',            'ö'=>'o', 'ø'=>'o', 'ù'=>'u', 'ú'=>'u', 'û'=>'u', 'ý'=>'y', 'þ'=>'b', 'ÿ'=>'y' );        $str = strtr($str, $unwanted_array);        return ($str);    }    /**     * @param $data     * @param string $label     * @param bool $return     * @return string     */    static function var_dump($data, $label='', $return = false) {        $debug           = debug_backtrace();        $callingFile     = $debug[0]['file'];        $callingFileLine = $debug[0]['line'];        ob_start();        var_dump($data);        $c = ob_get_contents();        ob_end_clean();        $c = preg_replace("/\r\n|\r/", "\n", $c);        $c = str_replace("]=>\n", '] = ', $c);        $c = preg_replace('/= {2,}/', '= ', $c);        $c = preg_replace("/\[\"(.*?)\"\] = /i", "[$1] = ", $c);        $c = preg_replace('/  /', "    ", $c);        $c = preg_replace("/\"\"(.*?)\"/i", "\"$1\"", $c);        $c = preg_replace("/(int|float)\(([0-9\.]+)\)/i", "$1() <span class=\"number\">$2</span>", $c);// Syntax Highlighting of Strings. This seems cryptic, but it will also allow non-terminated strings to get parsed.        $c = preg_replace("/(\[[\w ]+\] = string\([0-9]+\) )\"(.*?)/sim", "$1<span class=\"string\">\"", $c);        $c = preg_replace("/(\"\n{1,})( {0,}\})/sim", "$1</span>$2", $c);        $c = preg_replace("/(\"\n{1,})( {0,}\[)/sim", "$1</span>$2", $c);        $c = preg_replace("/(string\([0-9]+\) )\"(.*?)\"\n/sim", "$1<span class=\"string\">\"$2\"</span>\n", $c);        $regex = array(            // Numberrs            'numbers' => array('/(^|] = )(array|float|int|string|resource|object\(.*\)|\&amp;object\(.*\))\(([0-9\.]+)\)/i', '$1$2(<span class="number">$3</span>)'),            // Keywords            'null' => array('/(^|] = )(null)/i', '$1<span class="keyword">$2</span>'),            'bool' => array('/(bool)\((true|false)\)/i', '$1(<span class="keyword">$2</span>)'),            // Types            'types' => array('/(of type )\((.*)\)/i', '$1(<span class="type">$2</span>)'),            // Objects            'object' => array('/(object|\&amp;object)\(([\w]+)\)/i', '$1(<span class="object">$2</span>)'),            // Function            'function' => array('/(^|] = )(array|string|int|float|bool|resource|object|\&amp;object)\(/i', '$1<span class="function">$2</span>('),        );        foreach ($regex as $x) {            $c = preg_replace($x[0], $x[1], $c);        }        $style = '/* outside div - it will float and match the screen */.dumpr {    margin: 2px;    padding: 2px;    background-color: #fbfbfb;    float: left;    clear: both;}/* font size and family */.dumpr pre {    color: #000000;    font-size: 9pt;    font-family: "Courier New",Courier,Monaco,monospace;    margin: 0px;    padding-top: 5px;    padding-bottom: 7px;    padding-left: 9px;    padding-right: 9px;}/* inside div */.dumpr div {    background-color: #fcfcfc;    border: 1px solid #d9d9d9;    float: left;    clear: both;}/* syntax highlighting */.dumpr span.string {color: #c40000;}.dumpr span.number {color: #ff0000;}.dumpr span.keyword {color: #007200;}.dumpr span.function {color: #0000c4;}.dumpr span.object {color: #ac00ac;}.dumpr span.type {color: #0072c4;}';        $style = preg_replace("/ {2,}/", "", $style);        $style = preg_replace("/\t|\r\n|\r|\n/", "", $style);        $style = preg_replace("/\/\*.*?\*\//i", '', $style);        $style = str_replace('}', '} ', $style);        $style = str_replace(' {', '{', $style);        $style = trim($style);        $c = trim($c);        $c = preg_replace("/\n<\/span>/", "</span>\n", $c);        if ($label == ''){            $line1 = '';        } else {            $line1 = "<strong>$label</strong> \n";        }        $out = "\n<!-- Dumpr Begin -->\n".            "<style type=\"text/css\">".$style."</style>\n".            "<div class=\"dumpr\">    <div><pre>$line1 $callingFile : $callingFileLine \n$c\n</pre></div></div><div style=\"clear:both;\">&nbsp;</div>".            "\n<!-- Dumpr End -->\n";        if($return) {            return $out;        } else {            echo $out;        }    }    /**     * @param $str     * @return mixed     */    public static function convertToUtf8Code($str)    {        $utf8_ansi2 = array(            "#U00c0" =>"À",            "#U00c1" =>"Á",            "#U00c2" =>"Â",            "#U00c3" =>"Ã",            "#U00c4" =>"Ä",            "#U00c5" =>"Å",            "#U00c6" =>"Æ",            "#U00c7" =>"Ç",            "#U00c8" =>"È",            "#U00c9" =>"É",            "#U00ca" =>"Ê",            "#U00cb" =>"Ë",            "#U00cc" =>"Ì",            "#U00cd" =>"Í",            "#U00ce" =>"Î",            "#U00cf" =>"Ï",            "#U00d1" =>"Ñ",            "#U00d2" =>"Ò",            "#U00d3" =>"Ó",            "#U00d4" =>"Ô",            "#U00d5" =>"Õ",            "#U00d6" =>"Ö",            "#U00d8" =>"Ø",            "#U00d9" =>"Ù",            "#U00da" =>"Ú",            "#U00db" =>"Û",            "#U00dc" =>"Ü",            "#U00dd" =>"Ý",            "#U00df" =>"ß",            "#U00e0" =>"à",            "#U00e1" =>"á",            "#U00e2" =>"â",            "#U00e3" =>"ã",            "#U00e4" =>"ä",            "#U00e5" =>"å",            "#U00e6" =>"æ",            "#U00e7" =>"ç",            "#U00e8" =>"è",            "#U00e9" =>"é",            "#U00ea" =>"ê",            "#U00eb" =>"ë",            "#U00ec" =>"ì",            "#U00ed" =>"í",            "#U00ee" =>"î",            "#U00ef" =>"ï",            "#U00f0" =>"ð",            "#U00f1" =>"ñ",            "#U00f2" =>"ò",            "#U00f3" =>"ó",            "#U00f4" =>"ô",            "#U00f5" =>"õ",            "#U00f6" =>"ö",            "#U00f8" =>"ø",            "#U00f9" =>"ù",            "#U00fa" =>"ú",            "#U00fb" =>"û",            "#U00fc" =>"ü",            "#U00fd" =>"ý",            "#U00a0?" => " ? ",            "#U00ff" =>"ÿ");        foreach ($utf8_ansi2 as $k => $v) {            $str = str_replace($v, $k, $str);        }        return $str;    }}