<?phpnamespace App\Repository;use App\Entity\CitationV2;use App\Entity\Tag;use App\Service\UtilityTools;use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;use Doctrine\Common\Persistence\ManagerRegistry;/** * @method CitationV2|null find($id, $lockMode = null, $lockVersion = null) * @method CitationV2|null findOneBy(array $criteria, array $orderBy = null) * @method CitationV2[]    findAll() * @method CitationV2[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null) */class CitationV2Repository extends ServiceEntityRepository{    private $GENRE_FICTION = array('personnage fictif', 'film', 'serie', 'cinema', 'tv', 'animation', 'Ciné', 'Film', 'Série', 'Cinéma');    private $GENRE_INSPIRATION = array('Mathématicien','Physicien','Astronome','Essayiste','Producteur','peintre','Scénariste', 'Cinéaste', 'Comique', 'sportif', 'realisateur', 'auteur','humoriste', 'chanteur', 'musicien', 'artiste', 'Artiste', 'acteur', 'écrivaine', 'ecrivain', 'Compositeur', 'Informaticien', 'Homme d\'affaire', 'Femme d\'affaire');    private $GENRE_CELEBRE = array('Révolutionnaire','Ministre','Empereur','personnalité historique','president','Religieux','Mathématicien','Physicien','Dramaturge','Homme politique','Femme politique','Homme d\'état','Femme d\'état','Romancier', 'philosophe',  'auteur', 'ecrivain', 'poete', 'Poète', 'politique', 'publique', 'scientifique', 'Inventeur');    public function __construct(ManagerRegistry $registry)    {        parent::__construct($registry, CitationV2::class);    }    /**     * @param $genre     * @param int $language     * @return int     */    public function countAllCitationByGenre($genre, $language = 0): int    {    $genre = $this->$genre;    for ($i = 0; $i < count($genre); $i++)    {    $genre[$i] = '"'.$genre[$i].'"';    }    $conn = $this->getEntityManager()->getConnection();    $sql = '    SELECT DISTINCT c.id    FROM citation_v2 c    LEFT JOIN auteur a ON c.auteur_id = a.id    LEFT JOIN citation_tag ct ON c.id = ct.citation_id    LEFT JOIN tag t ON ct.tag_id = t.id    WHERE c.language = :language AND t.name in ('.implode(",", $genre).')    ';    $stmt = $conn->prepare($sql);    $stmt->execute(array("language" => $language));    return count($stmt->fetchAll());    }    /**     * @param $start     * @param $offset     * @param $order     * @param $genre     * @param int $language     * @return array     */    public function findAllCitationByGenre($start, $offset, $order, $genre, $language = 0) : array    {        $order = explode(" ", $order);        return $this->createQueryBuilder('c')            ->leftjoin('c.auteur', 'a')            ->leftjoin('c.tag', 't')            ->where('c.language = :language')            ->andWhere('t.name IN (:genre)')            ->setParameter('language', $language)            ->setParameter('genre', $this->$genre)            ->groupBy('c.id')            ->orderBy($order[0] , $order[1])            ->setFirstResult($start)            ->setMaxResults($offset)            ->getQuery()            ->getResult();    }    /**     * @param $start     * @param $offset     * @param $order     * @param int $language     * @return array     */    public function findAllCitationByCitationDuJour($start, $offset, $order, $language = 0): array    {        $order = explode(" ", $order);        return $this->createQueryBuilder('c')            ->where('c.language = :language')            ->andWhere('c.citation_du_jour = 1')            ->setParameter('language', $language)            ->andWhere('c.date_citation_du_jour <= :dateCitationDuJourEnd')            ->setParameter('dateCitationDuJourEnd', date('Y-m-d')." 23:59:59")            ->orderBy($order[0] , $order[1])            ->setFirstResult($start)            ->setMaxResults($offset)            ->getQuery()            ->getResult();    }    /**     * @param $start     * @param $offset     * @param $order     * @param int $language     * @return array     */    public function findCitationDuJour(): array    {        return $this->createQueryBuilder('c')            ->where('c.date_citation_du_jour >= :dateCitationDuJourBegin')            ->setParameter('dateCitationDuJourBegin', date('Y-m-d')." 00:00:00")            ->andWhere('c.date_citation_du_jour <= :dateCitationDuJourEnd')            ->setParameter('dateCitationDuJourEnd', date('Y-m-d')." 23:59:59")            ->getQuery()            ->getResult();    }    /**     * @param $auteur     * @param int $language     * @return int     */    public function countAllCitationByAuteur($auteur, $language = 0) : int    {        return $this->createQueryBuilder('c')            ->select('count(c.id)')            ->leftJoin('c.auteur', 'a')            ->where('c.language = :language')            ->andWhere('a.name = :auteur')            ->setParameter('language', $language)            ->setParameter('auteur', $auteur)            ->getQuery()            ->getSingleScalarResult();    }    /**     * @param $start     * @param $offset     * @param $order     * @param $auteur     * @param int $language     * @return array     */    public function findAllCitationByAuteur($start, $offset, $order, $auteur, $language = 0): array    {        $order = explode(" ", $order);        return $this->createQueryBuilder('c')            ->leftJoin('c.auteur', 'a')            ->where('c.language >= :language')            ->andWhere('a.name = :auteur')            ->setParameter('language', $language)            ->setParameter('auteur', $auteur)            ->groupBy('c.id')            ->orderBy($order[0] , $order[1])            ->setFirstResult($start)            ->setMaxResults($offset)            ->getQuery()            ->getResult();    }    /**     * @param $start     * @param $offset     * @param $order     * @param $genre     * @param int $language     * @return array     * @throws \Doctrine\DBAL\DBALException     */    public function findAllCitation($start, $offset, $order, $language = 0): array    {        $order = explode(" ", $order);        return $this->createQueryBuilder('c')            ->where('c.language = :language')            ->setParameter('language', $language)            ->orderBy($order[0] , $order[1])            ->setFirstResult($start)            ->setMaxResults($offset)            ->getQuery()            ->getResult();    }    /**     * @return array     */    public function findAllCitationCustom(): array    {        return $this->createQueryBuilder('c')            ->where("c.vrai_auteur != ''")            ->andWhere('c.auteur_checked = 1')            ->getQuery()            ->getResult();    }    /**     * @param $search     * @param int $language     * @return int     */    public function countAllCitationBySearch($search, $language = 0): int    {        $conn = $this->getEntityManager()->getConnection();        $sql = '        SELECT DISTINCT c.id        FROM citation_v2 c        LEFT JOIN auteur a ON c.auteur_id = a.id        LEFT JOIN citation_tag ct ON c.id = ct.citation_id        LEFT JOIN tag t ON ct.tag_id = t.id        WHERE c.language = :language AND (t.name LIKE :search OR c.description LIKE :search OR a.name LIKE :search)';        $stmt = $conn->prepare($sql);        $stmt->execute(array("language" => $language, "search" => "%$search%"));        return count($stmt->fetchAll());    }    /**     * @param $start     * @param $offset     * @param $order     * @param $search     * @param int $language     * @return array     */    public function findAllCitationBySearch($start, $offset, $order, $search, $language = 0): array    {        $conn = $this->getEntityManager()->getConnection();        $sql = '        SELECT DISTINCT c.id        FROM citation_v2 c        LEFT JOIN auteur a ON c.auteur_id = a.id        LEFT JOIN citation_tag ct ON c.id = ct.citation_id        LEFT JOIN tag t ON ct.tag_id = t.id        WHERE c.language = :language AND (t.name LIKE :search OR c.description LIKE :search OR a.name LIKE :search)        ORDER BY '.$order.'        LIMIT  '.$start.', '.$offset;        $stmt = $conn->prepare($sql);        $stmt->execute(array("language" => $language, "search" => "%$search%"));        $result = $stmt->fetchAll();        $citations = array();        for ($i = 0; $i < count($result); $i++)        {            $citations[] = $this->find($result[$i]['id']);        }        return $citations;    }    /**     * @param $tag     * @param int $language     * @return int     */    public function countAllCitationByTag($tag, $language = 0) : int    {        return $this->createQueryBuilder('c')            ->select('count(c.id)')            ->leftJoin('c.tag', 't')            ->where('c.language = :language')            ->andWhere('t.name = :tag')            ->setParameter('language', $language)            ->setParameter('tag', $tag)            ->getQuery()            ->getSingleScalarResult();    }    /**     * @param $start     * @param $offset     * @param $order     * @param $tag     * @param int $language     * @return array     * @throws \Doctrine\DBAL\DBALException     */    public function findAllCitationByTag($start, $offset, $order, $tag, $language = 0): array    {        $order = explode(" ", $order);        return $this->createQueryBuilder('c')            ->leftJoin('c.auteur', 'a')            ->leftJoin('c.tag', 't')            ->where('c.language = :language')            ->andWhere('t.name = :tag')            ->setParameter('language', $language)            ->setParameter('tag', $tag)            ->groupBy('c.id')            ->orderBy($order[0] , $order[1])            ->setFirstResult($start)            ->setMaxResults($offset)            ->getQuery()            ->getResult();    }    /**     * @param $description     * @return bool     */    public function existByDescription($description) {        $query = $this            ->createQueryBuilder('c')            ->select('c.description')            ->where("upper(c.description) = upper(:description)")            ->setParameter('description', $description)            ->getQuery()            ->getResult()        ;        return ((empty($query)) ? false : true);    }    /**     * @param $citation     * @param $tags     * @param $language     * @param $description     * @param $url     * @param $em     * @throws \Exception     */    public function insertNew($citation, $tags, $language, $description, $url, $em) {        $citation->setLanguage($language);        foreach ($tags as $key => $value) {            $v = explode("/", $value);            foreach ($v as $genre) {                $genre = trim($genre);                if ($genre == "")                    continue ;                if (($persistedTag = $em->getRepository(Tag::class)->findOneByName($genre)) == null)                {                    $persistedTag = new Tag();                    $persistedTag->setName($genre);                    $em->persist($persistedTag);                }                $citation->addTag($persistedTag);            }        }        $citation->setDescription($description);        $citation->setUrl($url);        $citation->setUpload(new \DateTime);        $citation->setCitationDuJour(0);        $citation->setCitationEnAvant(0);        $citation->setCountLikes(0);        $em->persist($citation);        $em->flush();    }}